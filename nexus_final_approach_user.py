# -*- coding: utf-8 -*-
"""Nexus_Final_Approach_user.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12rduLTHIKpVWk6FfTErVUX3o9aBt4z9w
"""

import os
import json
import hashlib
import uuid
from datetime import datetime
from pathlib import Path

USERS_DIR = Path("users")
USERS_DIR.mkdir(exist_ok=True)
HISTORY_DIR = Path("history")
HISTORY_DIR.mkdir(exist_ok=True)

def _user_file(username: str) -> Path:
    return USERS_DIR / f"{username}.json"

def _hash_password(password: str, salt: bytes = None, iterations: int = 310000):
    if not salt:
        salt = os.urandom(16)
    pw_hash = hashlib.pbkdf2_hmac('sha256', password.encode(), salt, iterations)
    return pw_hash.hex(), salt.hex(), iterations

def _verify_password(input_password: str, stored_hash: str, salt: str, iterations: int) -> bool:
    input_hash, _, _ = _hash_password(input_password, bytes.fromhex(salt), iterations)
    return input_hash == stored_hash

def _save_user(data: dict):
    with open(_user_file(data["username"]), "w") as f:
        json.dump(data, f, indent=2)

def user_registration(username: str, password: str) -> str:
    if _user_file(username).exists():
        return {
            'state':False,
            'message':"Username already exists."
        }

    pw_hash, salt, iterations = _hash_password(password)
    user_id = str(uuid.uuid4())

    user_data = {
        "user_id": user_id,
        "username": username,
        "pw_hash": pw_hash,
        "salt": salt,
        "iterations": iterations,
        "created_at": datetime.utcnow().isoformat() + "Z",
    }

    _save_user(user_data)
    return {
        'state':True,
        'username':username,
        'user_id':user_id
    }

def user_login(username: str, password: str) -> str:
    user_file = _user_file(username)
    if not user_file.exists():
        return {
            'state':False,
            'message':"User not found."
        }
    with open(user_file, "r") as f:
        user_data = json.load(f)
    if _verify_password(password, user_data["pw_hash"], user_data["salt"], user_data["iterations"]):
        return {
            'state':True,
            'username':username,
            'user_id':user_data['user_id']
        }
    else:
        return {
            'state':False,
            'message':"Incorrect password."
        }

def save_user_history(user_id: str, data: dict) -> str:
    user_history_dir = HISTORY_DIR / user_id
    user_history_dir.mkdir(parents=True, exist_ok=True)

    timestamp = datetime.utcnow().isoformat().replace(":", "-").replace(".", "-")
    history_file = user_history_dir / f"{timestamp}.json"

    with open(history_file, "w") as f:
        json.dump(data, f, indent=2)
    return

def get_user_history(user_id: str) -> list:
    user_history_dir = HISTORY_DIR / user_id
    if not user_history_dir.exists():
        return []

    history_records = []
    for file in sorted(user_history_dir.glob("*.json")):
        with open(file, "r") as f:
            record = json.load(f)
            history_records.append(record)

    return history_records

# save_user_history('1f319eb6-3c7c-434c-98a4-c81fc87c1b2e', {'name':'ftfy'})
